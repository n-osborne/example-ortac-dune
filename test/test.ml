(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27"]

open Bob
module Ortac_runtime = Ortac_runtime_qcheck_stm

module Spec = struct
  open STM

  type sut = int t
  type cmd = Push of int | Pop_opt

  let show_cmd cmd__001_ =
    match cmd__001_ with
    | Push a_1 -> Format.asprintf "%s %a sut" "push" (Util.Pp.pp_int true) a_1
    | Pop_opt -> Format.asprintf "%s sut" "pop_opt"

  type nonrec state = { contents : int list }

  let init_state =
    let () = () in
    {
      contents =
        (try []
         with e ->
           raise
             (Ortac_runtime.Partial_function
                ( e,
                  {
                    Ortac_runtime.start =
                      {
                        pos_fname = "../src/bob.mli";
                        pos_lnum = 6;
                        pos_bol = 239;
                        pos_cnum = 264;
                      };
                    Ortac_runtime.stop =
                      {
                        pos_fname = "../src/bob.mli";
                        pos_lnum = 6;
                        pos_bol = 239;
                        pos_cnum = 266;
                      };
                  } )));
    }

  let init_sut () = create ()
  let cleanup _ = ()

  let arb_cmd _ =
    let open QCheck in
    make ~print:show_cmd
      (let open Gen in
       oneof [ pure (fun a_1 -> Push a_1) <*> int; pure Pop_opt ])

  let next_state cmd__002_ state__003_ =
    match cmd__002_ with
    | Push a_1 ->
        {
          contents =
            (try a_1 :: state__003_.contents
             with e ->
               raise
                 (Ortac_runtime.Partial_function
                    ( e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "../src/bob.mli";
                            pos_lnum = 11;
                            pos_bol = 421;
                            pos_cnum = 446;
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "../src/bob.mli";
                            pos_lnum = 11;
                            pos_bol = 421;
                            pos_cnum = 467;
                          };
                      } )));
        }
    | Pop_opt ->
        {
          contents =
            (try match state__003_.contents with [] -> [] | x :: xs -> xs
             with e ->
               raise
                 (Ortac_runtime.Partial_function
                    ( e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "../src/bob.mli";
                            pos_lnum = 16;
                            pos_bol = 650;
                            pos_cnum = 675;
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "../src/bob.mli";
                            pos_lnum = 18;
                            pos_bol = 740;
                            pos_cnum = 783;
                          };
                      } )));
        }

  let precond cmd__008_ state__009_ =
    match cmd__008_ with Push a_1 -> true | Pop_opt -> true

  let postcond _ _ _ = true

  let run cmd__010_ sut__011_ =
    match cmd__010_ with
    | Push a_1 -> Res (unit, push a_1 sut__011_)
    | Pop_opt -> Res (option int, pop_opt sut__011_)
end

module STMTests = Ortac_runtime.Make (Spec)

let check_init_state () = ()

let ortac_postcond cmd__004_ state__005_ res__006_ =
  let open Spec in
  let open STM in
  let new_state__007_ = lazy (next_state cmd__004_ state__005_) in
  match (cmd__004_, res__006_) with
  | Push a_1, Res ((Unit, _), _) -> None
  | Pop_opt, Res ((Option Int, _), o) ->
      if
        try
          o
          =
          match state__005_.contents with [] -> None | x_1 :: xs_1 -> Some x_1
        with e ->
          raise
            (Ortac_runtime.Partial_function
               ( e,
                 {
                   Ortac_runtime.start =
                     {
                       pos_fname = "../src/bob.mli";
                       pos_lnum = 19;
                       pos_bol = 784;
                       pos_cnum = 796;
                     };
                   Ortac_runtime.stop =
                     {
                       pos_fname = "../src/bob.mli";
                       pos_lnum = 21;
                       pos_bol = 858;
                       pos_cnum = 896;
                     };
                 } ))
      then None
      else
        Some
          (Ortac_runtime.report "Bob" "create ()"
             (Either.right
                (Res
                   ( option int,
                     try
                       match state__005_.contents with
                       | [] -> None
                       | x_1 :: xs_1 -> Some x_1
                     with e ->
                       raise
                         (Ortac_runtime.Partial_function
                            ( e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "../src/bob.mli";
                                    pos_lnum = 19;
                                    pos_bol = 784;
                                    pos_cnum = 800;
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "../src/bob.mli";
                                    pos_lnum = 21;
                                    pos_bol = 858;
                                    pos_cnum = 896;
                                  };
                              } )) )))
             "pop_opt"
             [
               ( "o = match old s.contents with\n\
                 \                   | [] -> None\n\
                 \                   | x :: xs -> Some x",
                 {
                   Ortac_runtime.start =
                     {
                       pos_fname = "../src/bob.mli";
                       pos_lnum = 19;
                       pos_bol = 784;
                       pos_cnum = 796;
                     };
                   Ortac_runtime.stop =
                     {
                       pos_fname = "../src/bob.mli";
                       pos_lnum = 21;
                       pos_bol = 858;
                       pos_cnum = 896;
                     };
                 } );
             ])
  | _ -> None

let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [
       STMTests.agree_test ~count ~name:"Bob STM tests" check_init_state
         ortac_postcond;
     ])
